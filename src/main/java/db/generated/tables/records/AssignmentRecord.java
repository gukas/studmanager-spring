/*
 * This file is generated by jOOQ.
*/
package db.generated.tables.records;


import db.generated.tables.Assignment;

import java.sql.Date;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AssignmentRecord extends UpdatableRecordImpl<AssignmentRecord> implements Record4<Integer, Date, Date, Integer> {

    private static final long serialVersionUID = -2042970531;

    /**
     * Setter for <code>college.assignment.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>college.assignment.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>college.assignment.data_contr</code>.
     */
    public void setDataContr(Date value) {
        set(1, value);
    }

    /**
     * Getter for <code>college.assignment.data_contr</code>.
     */
    public Date getDataContr() {
        return (Date) get(1);
    }

    /**
     * Setter for <code>college.assignment.data_work</code>.
     */
    public void setDataWork(Date value) {
        set(2, value);
    }

    /**
     * Getter for <code>college.assignment.data_work</code>.
     */
    public Date getDataWork() {
        return (Date) get(2);
    }

    /**
     * Setter for <code>college.assignment.var_assig_id</code>.
     */
    public void setVarAssigId(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>college.assignment.var_assig_id</code>.
     */
    public Integer getVarAssigId() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Date, Date, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Date, Date, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Assignment.ASSIGNMENT.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Date> field2() {
        return Assignment.ASSIGNMENT.DATA_CONTR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Date> field3() {
        return Assignment.ASSIGNMENT.DATA_WORK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field4() {
        return Assignment.ASSIGNMENT.VAR_ASSIG_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Date value2() {
        return getDataContr();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Date value3() {
        return getDataWork();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value4() {
        return getVarAssigId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AssignmentRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AssignmentRecord value2(Date value) {
        setDataContr(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AssignmentRecord value3(Date value) {
        setDataWork(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AssignmentRecord value4(Integer value) {
        setVarAssigId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AssignmentRecord values(Integer value1, Date value2, Date value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AssignmentRecord
     */
    public AssignmentRecord() {
        super(Assignment.ASSIGNMENT);
    }

    /**
     * Create a detached, initialised AssignmentRecord
     */
    public AssignmentRecord(Integer id, Date dataContr, Date dataWork, Integer varAssigId) {
        super(Assignment.ASSIGNMENT);

        set(0, id);
        set(1, dataContr);
        set(2, dataWork);
        set(3, varAssigId);
    }
}
