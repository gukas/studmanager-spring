/*
 * This file is generated by jOOQ.
*/
package db.generated.tables;


import db.generated.College;
import db.generated.Keys;
import db.generated.tables.records.SubFacultyRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SubFaculty extends TableImpl<SubFacultyRecord> {

    private static final long serialVersionUID = 77664500;

    /**
     * The reference instance of <code>college.sub_faculty</code>
     */
    public static final SubFaculty SUB_FACULTY = new SubFaculty();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubFacultyRecord> getRecordType() {
        return SubFacultyRecord.class;
    }

    /**
     * The column <code>college.sub_faculty.id</code>.
     */
    public final TableField<SubFacultyRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>college.sub_faculty.nomer</code>.
     */
    public final TableField<SubFacultyRecord, Integer> NOMER = createField("nomer", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>college.sub_faculty.name</code>.
     */
    public final TableField<SubFacultyRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(60).nullable(false), this, "");

    /**
     * Create a <code>college.sub_faculty</code> table reference
     */
    public SubFaculty() {
        this("sub_faculty", null);
    }

    /**
     * Create an aliased <code>college.sub_faculty</code> table reference
     */
    public SubFaculty(String alias) {
        this(alias, SUB_FACULTY);
    }

    private SubFaculty(String alias, Table<SubFacultyRecord> aliased) {
        this(alias, aliased, null);
    }

    private SubFaculty(String alias, Table<SubFacultyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return College.COLLEGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SubFacultyRecord> getPrimaryKey() {
        return Keys.KEY_SUB_FACULTY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SubFacultyRecord>> getKeys() {
        return Arrays.<UniqueKey<SubFacultyRecord>>asList(Keys.KEY_SUB_FACULTY_PRIMARY, Keys.KEY_SUB_FACULTY_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SubFaculty as(String alias) {
        return new SubFaculty(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SubFaculty rename(String name) {
        return new SubFaculty(name, null);
    }
}
