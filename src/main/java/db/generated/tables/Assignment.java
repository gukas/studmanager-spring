/*
 * This file is generated by jOOQ.
*/
package db.generated.tables;


import db.generated.College;
import db.generated.Keys;
import db.generated.tables.records.AssignmentRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Assignment extends TableImpl<AssignmentRecord> {

    private static final long serialVersionUID = -546894230;

    /**
     * The reference instance of <code>college.assignment</code>
     */
    public static final Assignment ASSIGNMENT = new Assignment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssignmentRecord> getRecordType() {
        return AssignmentRecord.class;
    }

    /**
     * The column <code>college.assignment.id</code>.
     */
    public final TableField<AssignmentRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>college.assignment.data_contr</code>.
     */
    public final TableField<AssignmentRecord, Date> DATA_CONTR = createField("data_contr", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>college.assignment.data_work</code>.
     */
    public final TableField<AssignmentRecord, Date> DATA_WORK = createField("data_work", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>college.assignment.var_assig_id</code>.
     */
    public final TableField<AssignmentRecord, Integer> VAR_ASSIG_ID = createField("var_assig_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>college.assignment</code> table reference
     */
    public Assignment() {
        this("assignment", null);
    }

    /**
     * Create an aliased <code>college.assignment</code> table reference
     */
    public Assignment(String alias) {
        this(alias, ASSIGNMENT);
    }

    private Assignment(String alias, Table<AssignmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Assignment(String alias, Table<AssignmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return College.COLLEGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AssignmentRecord> getPrimaryKey() {
        return Keys.KEY_ASSIGNMENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AssignmentRecord>> getKeys() {
        return Arrays.<UniqueKey<AssignmentRecord>>asList(Keys.KEY_ASSIGNMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AssignmentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AssignmentRecord, ?>>asList(Keys.ASSIGNMENT_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Assignment as(String alias) {
        return new Assignment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Assignment rename(String name) {
        return new Assignment(name, null);
    }
}
